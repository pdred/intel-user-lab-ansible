---
- name: Check if SSH key exists
  ansible.builtin.stat:
    path: "~/.ssh/ansible_ed25519"
  register: ssh_key

- name: Generate SSH key if it does not exist
  ansible.builtin.command: ssh-keygen -t ed25519 -N "" -f ~/.ssh/ansible_ed25519
  when: not ssh_key.stat.exists
  delegate_to: localhost

- name: Create systemd user service for ssh-agent
  template:
    src: ssh-agent.service.j2
    dest: "/etc/systemd/user/ssh-agent.service"

- name: Enable ssh-agent service to start on boot
  systemd:
    user: true
    name: ssh-agent
    enabled: true
    state: started

- name: Add SSH key to ssh-agent
  ansible.builtin.shell: ssh-add ~/.ssh/ansible_ed25519
  delegate_to: localhost
  when: ssh_key.stat.exists

- name: Install required packages
  ansible.builtin.package:
    name:
      - ansible-core
      - git
      - xauth
      - gnome-keyring
      - NetworkManager-tui
    state: present

- name: Enable X11Forwarding in SSH
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?X11Forwarding'
    line: 'X11Forwarding yes'
    state: present
  notify: restart sshd

- name: Ensure authorized_keys exists
  file:
    path: "~/.ssh/authorized_keys"
    state: touch

- name: Add SSH key to authorized_keys
  lineinfile:
    path: "~/.ssh/authorized_keys"
    line: "{{ lookup('file', ssh_key_path + '.pub') }}"
    state: present

- name: Install required packages
  ansible.builtin.package:
    name:
      - ansible-core
      - gnome-keyring
      - git
      - xauth
      - NetworkManager-tui
      - python3-pip
    state: present

- name: Add current user to the wheel group
  user:
    name: "{{ ansible_user_id }}"
    groups: wheel
    append: true

- name: Allow wheel group to sudo without a password
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
